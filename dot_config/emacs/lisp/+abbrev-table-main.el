;;; +abbrev-table-main.el -*- lexical-binding: t; -*-
;;
;; Copyright (c) 2024 Free Software Foundation, Inc.
;;
;; Author: Luis Henriquez-Perez <luis@luishp.xyz>
;; Homepage: https://github.com/Luis-Henriquez-Perez/dotfiles/
;;
;; This file is not part of GNU Emacs.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.
;;
;;; Commentary:
;;
;;  Define my main abbrev table, `+abbrev-table-main'.
;;
;;; Code:
(require 'abbrev)

(define-abbrev-table '+abbrev-table-main nil)
(define-abbrev +abbrev-table-main "vry"            "every"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "defini"         "definition"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bindngs"        "bindings"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "regexps"        "regular expression"            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "alty"           "Alternatively"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "albeti"         "albeit"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bookmarkd"      "bookmarked"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "whatev"         "whatever"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "simplyfing"     "simplifying"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "satisfiying"    "satisfying"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "chara"          "character"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "interediary"    "intermediary"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "agan"           "again"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "spefically"     "specifically"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "certa"          "certain"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "godod"          "good"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wlel"           "well"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "temporl"        "temporarily"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "prob"           "probably"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bookms"         "bookmarks"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "anythig"        "anything"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "boookmark"      "bookmark"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sess"           "session"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bookmaks"       "bookmarks"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "supp"           "support"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "betw"           "between"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tat"            "that"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "arbi"           "arbitrary"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "regiser"        "register"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "afaict"         "as far as I can tell"          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "writig"         "writing"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "thme"           "them"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nesly"          "necessarily"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "enof"           "enough"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "andto"          "and to"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mins"           "minutes"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "happengin"      "happening"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tme"            "time"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sente"          "sentence"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "begi"           "beginning"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aroudn"         "around"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "xpansion"       "expansion"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nt"             "not"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "entier"         "entire"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "unfor"          "unfortunately"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "applicatioin"   "application"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dirs"           "directories"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "avg"            "average"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aleady"         "already"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "happ"           "happy"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "capitalizatoin" "capitalization"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "anem"           "name"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "contrl"         "control"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "jumpt"          "jump to"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "thatt"          "that"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lcoation"       "location"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "settingns"      "settings"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "recom"          "recommended"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "unwiedly"       "unwieldy"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bufer"          "buffer"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "takin"          "taking"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bookmakr"       "bookmark"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "thatd"          "that would"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "delimeter"      "delimiter"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "defualt"        "default"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "creae"          "create"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "reqs"           "requirements"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mabe"           "maybe"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ti"             "it"                            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bufers"         "buffers"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bookmakrs"      "bookmarks"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ais"            "as it stands,"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ais"            "as it stands"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "frmae"          "frame"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "somehwo"        "somehow"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wa"             "way"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "advisig"        "advising"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "inadvertedly"   "inadvertently"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aamof"          "as a matter of fact"           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "eamcs"          "emacs"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "oep"            "open"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tendencis"      "tendencies"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "magitcal"       "magical"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "perosnally"     "personally"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "successfullyy"  "successfully"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "thatss"         "that is"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nwo"            "now"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "determne"       "determine"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "abbreviatons"   "abbreviations"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "norml"          "normal"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "inappripriate"  "inappropriate"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "enalbe"         "enable"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "realestate"     "real-estate."                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "scrreen"        "screen"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "prop"           "property"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rfine"          "refine"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "previosu"       "previous"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ther"           "there"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rote"           "wrote"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "partl"          "partly"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ro"             "or"                            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "abbrrevs"       "abbrevs"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sev"            "several"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "procise"        "precise"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "whenn"          "when"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rounda"         "roundabout"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lisence"        "license"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "liscence"       "license"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "generatioin"    "generation"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "divishion"      "division"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "simialr"        "similar"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cmnt"           "comment"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "whites"         "whitespace"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dup"            "duplicate"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dupli"          "duplicate"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "commentar"      "commentary"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ppress"         "press"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "keybs"          "keybindings"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "reqed"          "required"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "examinging"     "examining"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "functinos"      "functions"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "iuwt"           "if you want to"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "eval"           "evaluate"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "teating"        "treating"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "abbort"         "abort"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "essntially"     "essentially"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "functoins"      "functions"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "loeaded"        "loaded"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "appropr"        "appropriate"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "pt"             "point"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "befo"           "before"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ottomh"         "off the top of my head"        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "anon"           "anonymous"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "gening"         "generating"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aoy"            "as of yet"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sillence"       "silence"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "updadte"        "update"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rnadom"         "random"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "deps"           "dependencies"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "req"            "requirement"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "udate"          "update"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cnfig"          "configuration"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "orners"         "corners"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sometiems"      "sometimes"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "abstractioins"  "abstractions"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "capt"           "captain"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "loadingn"       "loading"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "shoudnt"        "should not"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "actu"           "actually"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lke"            "like"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tother"         "together"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "usng"           "using"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "advoid"         "avoid"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bytecomp"       "byte-compilation"              nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dupl"           "duplicate"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "err"            "error"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "repeateadly"    "repeatedly"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wtim"           "with this in mind"             nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dingly"         "accordingly"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ued"            "used"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "consice"        "concise"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "doenst"         "does not"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "descr"          "description"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "vai"            "via"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "laoded"         "loaded"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mprove"         "improve"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "errs"           "errors"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "vals"           "values"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "env"            "environment"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fomr"           "form"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "upadte"         "update"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "deling"         "deleting"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "inst"           "instead"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "abrevs"         "abbreviations"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cpies"          "copies"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "memor"          "memory"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mch"            "much"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "durat"          "duration"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "buidls"         "builds"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "asb"            "as specified by"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "defering"       "deferring"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "temr"           "term"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "exs"            "examples"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "suport"         "support"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "oftne"          "often"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nl"             "newline"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "packae"         "package"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cmnts"          "comments"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lata"           "later"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ifo"            "in favor of"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "thes"           "these"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "prelim"         "preliminary"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "buff"           "buffer"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "raied"          "raised"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cmt"            "comment"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rased"          "raised"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "boudn"          "bound"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "commnt"         "comment"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "commendt"       "comment"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hnl"            "honestly"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "textobj"        "text-object"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "kbds"           "keybindings"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "canceled"       "cancelled"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ins"            "insert"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bds"            "bindings"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bd"             "binding"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "kbd"            "keybinding"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cmds"           "commands"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cmd"            "command"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ae"             "are"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "gral"           "general"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "progrress"      "progress"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "perf"           "perfect"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "separ"          "separate"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mgs"            "message"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wrld"           "world"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wich"           "which"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "msg"            "message"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mesage"         "message"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sems"           "seems"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rem"            "remove"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bod"            "body"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "defing"         "defining"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "awkard"         "akward"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "recos"          "recommends"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "binds"          "bindings"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nd"             "and"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "approp"         "appropriate"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aprop"          "appropriate"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lexi"           "lexicographically"             nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "econfig"        "Emacs configuration"           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "consec"         "consecutive"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "conseq"         "consequence"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "paces"          "spaces"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "beh"            "behavior"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "comnt"          "comment"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "keybind"        "keybinding"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "kbind"          "keybinding"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "keybinds"       "keybindings"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "kbinds"         "keybindings"                   nil :enable-function #'+abbrev-text-mode-enable-p)
;; ("abbrevs"                                      "abbreviations")
;; ("abbrev"                                       "abbreviation")
(define-abbrev +abbrev-table-main "bcomp"          "byte-compilation"              nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "unness"         "unnecessary"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "coment"         "comment"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fror"           "for"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "stup"           "setup"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "inclinaition"   "inclination"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tring"          "trying"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wanna"          "want to"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "effor"          "effort"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "undef"          "undefined"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sym"            "symbol"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wre"            "were"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ws"             "was"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "probs"          "problems"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "syms"           "symbols"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tbs"            "that being said"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "evalu"          "evaluation"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "oside"          "outside"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bside"          "beside"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sumes"          "assumes"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "evaling"        "evaluating"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "res"            "result"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "src"            "source"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sytle"          "style"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "elt"            "element"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "elts"           "elements"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "gens"           "generates"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "understandibly" "understandably"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "subborn"        "stubborn"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dever"          "developer"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dev"            "development"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mgiht"          "might"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "despa"          "desparate"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "prog"           "programming"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tti"            "the thing is"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "paht"           "path"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "val"            "value"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "optioinal"      "optional"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "homogenous"     "homogeneous"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "awa"            "as well as"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "simul"          "simultaneously"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "simultanouesly" "simultaneously"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "struct"         "structure"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "structs"        "structures"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "acces"          "access"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "comm"           "common"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "corr"           "corresponding"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "expr"           "expression"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "builtin"        "built-in"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "elems"          "elements"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "elem"           "element"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nones"          "nonessential"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "abt"            "about"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "yt"             "youtube"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "iadt"           "in addition to this"           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tldr"           "TLDR"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mo"             "more"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "opt"            "option"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "thro"           "through"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "alowed"         "allowed"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "allowd"         "allowed"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "pefect"         "perfect"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "negy"           "negatively"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "neg"            "negative"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "eff"            "effect"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "weras"          "whereas"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fol"            "following"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "foll"           "following"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ooh"            "out of hand"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "combi"          "combination"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ingen"          "in general"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "gened"          "generated"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aload"          "autoload"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "amt"            "amount"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "amoutn"         "amount"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lvl"            "level"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cd"             "could"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cud"            "could"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "infor"          "information"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "isn"            "is not"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "thhe"           "the"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ques"           "question"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "arg"            "argument"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "equiv"          "equivalent"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mmend"          "recommend"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "del"            "delete"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "desc"           "description"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hes"            "he is"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "impressoin"     "impression"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wsa"            "was"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "var"            "variable"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "vars"           "variables"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "macroexp"       "macro expansion"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "coments"        "comments"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "unes"           "unnecessary"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "uness"          "unnecessary"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dk"             "do not know"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "emacss"         "Emacs's"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ess"            "essentially"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sist"           "consistent"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "initing"        "initializing"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fnames"         "filenames"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "misc"           "miscellaneous"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "imm"            "immediately"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "evv"            "everything"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "abut"           "about"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "movo"           "moreover"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dandylion"      "dandelion"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dandylions"     "dandelions"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bev"            "bird's-eye view"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "thot"           "thought"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tmmw"           "to make matters worse"         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "freq"           "frequency"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "pertubed"       "perturbed"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "si"             "is"                            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "vs"             "versus"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mor"            "more"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "configing"      "configuring"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aume"           "as you might expect"           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ayme"           "as you might expect"           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tss"            "timestamps"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ts"             "timestamp"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "obj"            "object"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "oop"            "object-oriented-programming"   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ood"            "object-oriented-design"        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hwat"           "what"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sep"            "separate"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "utube"          "youtube"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hav"            "have"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ootq"           "out of the question"           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tte"            "to this end"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wasnt"          "was not"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ult"            "ultimate"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ultl"           "ultimately"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aia"            "all in all"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "soly"           "solely"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "idwt"           "I do not want to"              nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "coll"           "collection"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hadnt"          "had not"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "suces"          "success"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sucess"         "success"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "accros"         "across"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "resonable"      "reasonable"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sec"            "second"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "secs"           "seconds"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "reco"           "recommended"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sth"            "something"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ath"            "anything"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "corsor"         "cursor"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sdb"            "should not be"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rihgt"          "right"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "shdnt"          "should not"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aycs"           "as you can see"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "twisi"          "the way I see it"              nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fnr"            "for no reason"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mk"             "make"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "prases"         "phrases"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "thse"           "these"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lang"           "language"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "english"        "English"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nuf"            "enough"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "idek"           "I did not even know"           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cur"            "current"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "curr"           "current"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "onl"            "only"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "uve"            "you have"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "revaled"        "re-evaluated"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "idid"           "I did"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tres"           "interesting"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ml"             "modeline"                      nil :enable-function #'+abbrev-text-mode-enable-p)
;; ("def"                                          "definitely")
(define-abbrev +abbrev-table-main "docs"           "documentation"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "doc"            "documentation"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nfo"            "information"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "info"           "information"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "correclty"      "correctly"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "coudl"          "could"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "oofone"         "O(1)"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "iml"            "immediately"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "theyre"         "they are"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "punc"           "punctuation"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dling"          "downloading"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ez"             "easy"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fol"            "follow"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "popl"           "populate"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "als"            "autoloads"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "al"             "autoload"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ootw"           "out of the way"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "gen"            "generate"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aloads"         "autoloads"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "alods"          "autoloads"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dls"            "downloads"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lize"           "realize"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hwo"            "how"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tbe"            "to be exact"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "chars"          "characters"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "heres"          "here is"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hesi"           "hesitant"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ex"             "example"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "xample"         "example"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cna"            "can"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ord"            "order"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cate"           "category"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nyt"            "anything"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mena"           "mean"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "doin"           "doing"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "na"             "an"                            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "somethig"       "something"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "iac"            "in any case"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "di"             "do it"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "intro"          "introduction"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tha"            "that"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "char"           "character"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wt"             "want to"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hava"           "have a"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "deflt"          "default"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fname"          "filename"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ta"             "that"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "itl"            "it will"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "itll"           "it will"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mott"           "most of the time"              nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sd"             "should"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "shd"            "should"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "emacs"          "Emacs"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "alot"           "a lot"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "moro"           "moreover"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "orig"           "original"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "iat"            "in addition to"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "elisp"          "emacs-lisp"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "idl"            "I do not like"                 nil :enable-function #'+abbrev-text-mode-enable-p)
;; "id" is actually a word, but I use it so infrequently and I use the phrase I
;; would so frequently that it is worth having it be an abbrev for I.
;; ("wm"                                           "which")
(define-abbrev +abbrev-table-main "prec"           "precedence"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wdimbt"         "what do I mean by this"        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wdim"           "what do I mean"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "awn"            "also worth noting"             nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "int"            "I need to"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wch"            "which"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ch"             "which"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "igts"           "I have got to say"             nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ihtbs"          "it has to be said"             nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wd"             "would"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "freql"          "frequently"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ifreql"         "infrequently"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "infreql"        "infrequently"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "id"             "I would"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wan"            "want"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "idht"           "I do not have to"              nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hvae"           "have"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cann"           "cannot"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "icj"            "I can just"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ic"             "I can"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ure"            "you are"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lhp"            "Luis Henriquez-Perez"          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "noly"           "not only"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "specy"          "specifically"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rl"             "really"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "args"           "arguments"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ppl"            "people"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "o"              "of"                            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "urself"         "yourself"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ab"             "about"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ret"            "return"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tn"             "then"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "blv"            "believe"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nto"            "not"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mone"           "money"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hve"            "have"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "m"              "my"                            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "swich"          "switch"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "actuall"        "actually"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "evalt"          "evaluate"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "asap"           "A.S.A.P."                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "econf"          "emacs configuration"           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "alth"           "although"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "esp"            "especially"                    nil :enable-function #'+abbrev-text-mode-enable-p)
;; This clashes with the word "ill" but I barely use that word.  In the rare
;; event where I do need to use it I will unexpand it.
(define-abbrev +abbrev-table-main "ill"            "I will"                        nil :enable-function #'+abbrev-text-mode-enable-p)
;; This is a common abbrev for "by the way" but I feel like I do not really use
;; that phrase unless I am texting.
(define-abbrev +abbrev-table-main "imd"            "immediately"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "exand"          "expand"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ppet"           "snippet"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tse"            "these"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "usu"            "usually"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "iprac"          "in practice"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "efy"            "efficiency"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "evr"            "everything"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sen"            "seen"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wat"            "what"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dfl"            "default"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dflt"           "default"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "difr"           "differ"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "btw"            "between"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dif"            "difference"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "diff"           "difference"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "htat"           "that"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rnt"            "are not"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "arent"          "are not"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tt"             "the"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "len"            "length"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bf"             "before"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "af"             "after"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "oft"            "often"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dsnt"           "does not"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ihb"            "I had been"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "comptia"        "CompTIA"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "gt"             "get"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wev"            "whatever"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "jbos"           "jobs"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "theyll"         "they will"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "prevl"          "previously"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "prev"           "previous"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ivs"            "I have seen"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rxp"            "regular expression"            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rx"             "regular expression"            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dl"             "download"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "vc"             "version control"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wil"            "will"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "shiftk"         "SHIFT"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nots"           "number of times"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "num"            "number"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "f"              "of"                            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lins"           "lines"                         nil :enable-function #'+abbrev-text-mode-enable-p)
;; I thought that this could be a bad abbrev because it is too much line a
;; spelling mistake of =the=, but then I thought if I do misspell "the" it is
;; very unlikely I will do so by pressing =t= again.
(define-abbrev +abbrev-table-main "tht"            "thought"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "i"              "I"                             nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "luis"           "Luis"                          nil :enable-function #'+abbrev-text-mode-enable-p)
;; This will not work because ";" is not a work constituent.  I need to use
;; `aas' for this or come up with some other solution.
;; (";;"                                           ".")
;; TODO: move to spell-fixing abbrev.
(define-abbrev +abbrev-table-main "ivb"            "I have been"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "werent"         "were not"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rly"            "really"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aagp"           "at any given point"            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "begn"           "beginning"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "idt"            "I do not think"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "arent"          "are not"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ting"           "thing"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ned"            "need"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dir"            "directory"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ull"            "you will"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "spst"           "supposed"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hv"             "have"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "desiding"       "deciding"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "pkgs"           "packages"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "pkg"            "package"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ftmp"           "for the most part"             nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "readme"         "README"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "sdnt"           "should not"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cme"            "come"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "imed"           "immediately"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cesly"          "successfully"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "owoto"          "one way or the other"          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "configs"        "configurations"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "espace"         "escape"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ijwi"           "I just want it"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ijw"            "I just want"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "idw"            "I do not want"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ij"             "I just"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "unesy"          "unnecessarily"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "unes"           "unnecessary"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "nes"            "necessary"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bec"            "because"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "aswer"          "answer"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dlk"            "do not like"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tho"            "though"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "idkw"           "I do not know why"             nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "damw"           "do not ask me why"             nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "idlk"           "I do not like"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ilk"            "I like"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "auly"           "automatically"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dsl"            "Domain-Specific-Language"      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fn"             "function"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fns"            "functions"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ig"             "instagram"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "econf"          "emacs configuration"           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "kbdm"           "keyboard macro"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "kbdms"          "keyboard macros"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "msw"            "Microsoft Windows"             nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main ".mail"          "luis@luishp.xyz"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "imho"           "in my humble opinion"          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "imo"            "in my opinion"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fyi"            "for your information"          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lmk"            "let me know"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "afaik"          "as far as I know"              nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "idk"            "I do not know"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "gonna"          "going to"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "otc"            "on the contrary"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "st"             "sometimes"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tbh"            "to be honest"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "qwerty"         "QWERTY"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ngl"            "not going to lie"              nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tfb"            "to be frank"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ndo"            "window"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "tis"            "it is"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "amly"           "automatically"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "rn"             "right now"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bly"            "probably"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "lk"             "like"                          nil :enable-function #'+abbrev-text-mode-enable-p)
;; I want the word =config= to stay the same too much for this to be useful.
;; Right now it is frankly more of an impediment for me than something that
;; helps me.
(define-abbrev +abbrev-table-main "questioin"      "question"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ur"             "your"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wiht"           "with"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ith"            "with"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "abilit"         "ability"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ko"             "K.O."                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dat"            "that"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "incc"           "increase"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "incs"           "increase"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "decs"           "deccrease"                     nil :enable-function #'+abbrev-text-mode-enable-p)
;; TODO: Add a condition preventng it from expanding if I am writing a file path.
(define-abbrev +abbrev-table-main "config"         "configuration"                 nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "obv"            "obviously"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "appr"           "appropriate"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ofc"            "of course"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ok"             "O.K."                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "iis"            "it's"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "bc"             "because"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "iow"            "in other words"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "uun"            "up until now"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "exwm"           "EXWM"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fe"             "for example"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "evaled"         "evaluated"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "imma"           "I am going to"                 nil :enable-function #'+abbrev-text-mode-enable-p)
;; From https://sachachua.com/blog/2015/01/developing-emacs-micro-habits-text-automation/
(define-abbrev +abbrev-table-main "iwt"            "I want to"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hw"             "however"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ths"            "this"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "otoh"           "on the one hand"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "otth"           "on the other hand"             nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "kinda"          "kind of"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ohter"          "other"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fe"             "for example"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fi"             "for instance"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "youve"          "you have"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "youd"           "you would"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "il"             "I will"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "theres"         "there is"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "itss"           "it is"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "im"             "I am"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "illl"           "I will"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "cant"           "cannot"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "idd"            "ID"                            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dont"           "do not"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wontt"          "will not"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "doesnt"         "does not"                      nil :enable-function #'+abbrev-text-mode-enable-p)
;; Not sure I actually want this abbrev because =wont= is actually a word.
(define-abbrev +abbrev-table-main "ine"            "one"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "mispelling"     "misspelling"                   nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ry"             "very"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wont"           "will not"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "thats"          "that is"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "u"              "you"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ul"             "you'll"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dont"           "do not"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dnt"            "don't"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wo"             "without"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ive"            "I have"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ik"             "I know"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "plx"            "complex"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ribe"           "describe"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "iff"            "if and only if"                nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "addd"           "additionally"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "weve"           "we have"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "whats"          "what is"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "havent"         "have not"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "didnt"          "did not"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "shouldnt"       "should not"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "isnt"           "is not"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fo"             "for"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ud"             "you would"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fwis"           "from what I see"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fwiu"           "from what I understand"        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "youre"          "you are"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wouldnt"        "would not"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "woudnt"         "would not"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "coudnt"         "could not"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "couldnt"        "could not"                     nil :enable-function #'+abbrev-text-mode-enable-p)
;; These abbrevs are focused on spelling mistakes.
;; Here I focus on fixing unambiguous spelling mistakes.
(define-abbrev +abbrev-table-main "onw"            "own"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "frst"           "first"                         nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "edting"         "editing"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "alread"         "already"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "htats"          "that is"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "whehther"       "whether"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "somehting"      "something"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "hte"            "the"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "te"             "the"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "th"             "the"                           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "ot"             "to"                            nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "wnat"           "want"                          nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "stoped"         "stopped"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "capfs"          "completion-at-point-functions" nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "suprise"        "surprise"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "functoin"       "function"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "refect"         "reflect"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dint"           "did not"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "orignal"        "original"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "eachother"      "each other"                    nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dn"             "do not"                        nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dsn"            "does not"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "fsr"            "for some reason"               nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "propogate"      "propagate"                     nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "pakcage"        "package"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "pakcages"       "packages"                      nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "motn"           "more often than not"           nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "itc"            "in that case"                  nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "probl"          "problem"                       nil :enable-function #'+abbrev-text-mode-enable-p)
(define-abbrev +abbrev-table-main "dered"          "considered"                    nil :enable-function #'+abbrev-text-mode-enable-p)
;;; provide
(provide '+abbrev-table-main)
;;; +abbrev-table-main.el ends here
